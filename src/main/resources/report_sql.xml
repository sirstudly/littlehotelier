<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>Reporting SQL queries</comment>
    <entry key="reservations.split.rooms">
-- Query all unallocated reservations that span more than 1 room for the same room type
INSERT INTO wp_lh_rpt_split_rooms (job_id, reservation_id, guest_name, checkin_date, checkout_date, data_href, 
       notes, lh_status, booking_reference, booking_source, booked_date, eta, viewed_yn, created_date)
SELECT job_id, reservation_id, GROUP_CONCAT(distinct guest_name SEPARATOR ', ' ) guest_name, 
       checkin_date, checkout_date, data_href, notes, lh_status, booking_reference, 
       booking_source, booked_date, eta, viewed_yn, MAX(created_date) `created_date` 
  FROM wp_lh_calendar rep
 WHERE rep.job_id = :jobId -- the job_id of the AllocationScraperJob to use data for
   AND (
       EXISTS (
           -- all reservations where for the same room type, they are split into different rooms
           -- does not take into account group bookings
           SELECT t.job_id, t.reservation_id, t.room_type_id, MAX(t.capacity) AS capacity, SUM(t.num_beds) AS total_beds, COUNT(1) AS num_rooms
             FROM ( -- for each reservation, determine which rooms are they assigned to
                  SELECT c.job_id, c.reservation_id, rm.room, rm.room_type_id, rm.capacity, count(1) AS num_beds
                    FROM (SELECT DISTINCT job_id, reservation_id, room_id FROM wp_lh_calendar WHERE job_id = :jobId) c -- remove duplicates (bug when inserting data?)
                    JOIN wp_lh_rooms rm ON c.room_id = rm.id 
                   WHERE rm.room_type NOT IN ('LT_MALE', 'LT_FEMALE', 'DBL', 'TRIPLE', 'QUAD', 'TWIN')
                     AND c.reservation_id > 0 -- do not include room closures
                   GROUP BY c.job_id, c.reservation_id, rm.room, rm.room_type_id, rm.capacity
              ) t
            WHERE t.reservation_id = rep.reservation_id
            GROUP BY t.reservation_id, t.room_type_id
           HAVING SUM(t.num_beds) &lt;= MAX(t.capacity) -- strip out group bookings (ie. if number of beds exceeds capacity of room)
              AND COUNT(1) > 1 -- assigned to more than one room (for the same room type)
       ) -- end exists
       OR EXISTS (
           -- include all reservations which have unallocated rooms
           SELECT c.job_id, c.reservation_id, c.room_type_id
             FROM wp_lh_calendar c
            WHERE c.room_id IS NULL -- unallocated reservations don't have this set
              AND c.reservation_id = rep.reservation_id
              AND c.job_id = rep.job_id
       ) -- end exists
    )
 GROUP BY job_id, reservation_id, checkin_date, checkout_date, data_href, notes, lh_status, booking_reference, booking_source, booked_date, eta, viewed_yn
    </entry>
    <entry key="unpaid.deposit.report">
        INSERT INTO wp_lh_rpt_unpaid_deposit( job_id, guest_name, checkin_date, checkout_date, payment_total, data_href, booking_reference, booking_source, booked_date, notes, viewed_yn, created_date )
        SELECT f.job_id, GROUP_CONCAT( DISTINCT f.guest_name ) `guest_name`, f.checkin_date, f.checkout_date, f.payment_total, f.data_href, f.booking_reference, f.booking_source, f.booked_date, f.notes, f.viewed_yn, MAX(f.created_date) `created_date`
          FROM wp_lh_calendar f
          LEFT OUTER JOIN wp_lh_rpt_guest_comments c ON f.reservation_id = c.reservation_id
         WHERE f.job_id = :jobId
           AND ((       f.payment_total = f.payment_outstanding
                    AND f.payment_total &gt; 0
                    AND f.booking_source IN ('Booking.com', 'Expedia')
                    AND ((c.comments IS NULL OR 
                            (c.comments NOT LIKE '%You have received a virtual credit card for this reservation%'
                         AND c.comments NOT LIKE '%THIS RESERVATION HAS BEEN PRE-PAID%'
                         AND c.comments NOT LIKE '%The VCC shown is still not active.%'))
                         -- include migrated records
                         AND (f.notes IS NULL OR 
                             (f.notes NOT LIKE '%You have received a virtual credit card for this reservation%'
                         AND f.notes NOT LIKE '%THIS RESERVATION HAS BEEN PRE-PAID%'))))
               /* OR ( -- VCC charge date seems erratic; disabling since it can be found out easy enough on BDC site
                       -- any prepaid bookings with a checkin date of today or earlier should be charged in full by now
                        f.payment_outstanding &gt; 0
                    AND f.booking_source IN ('Booking.com')
                    AND f.checkin_date &lt; NOW()
                    AND (   c.comments LIKE '%You have received a virtual credit card for this reservation%'
                         OR c.comments LIKE '%THIS RESERVATION HAS BEEN PRE-PAID%'
                         OR c.comments LIKE '%The VCC shown is still not active.%')) */
               OR ( -- include non-refundable bookings
                        f.booking_source IN ('Hostelworld &amp; Hostelbookers', 'Booking.com', 'Hostelworld')
                    AND f.rate_plan_name IN ('Non-refundable', 'nonref')
                    AND f.payment_outstanding &gt; 0
                    AND f.booked_date &lt; DATE_SUB(NOW(), INTERVAL 2 DAY) -- leave a window until we process it
                   ))
         GROUP BY f.reservation_id, f.checkin_date, f.checkout_date, f.payment_total, f.data_href, f.booking_reference, f.booking_source, f.booked_date, f.notes, f.viewed_yn;
    </entry>
    <entry key="group.bookings">
        INSERT INTO `wp_lh_group_bookings` (job_id, reservation_id, guest_name, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, num_guests, notes, viewed_yn)
        SELECT job_id, reservation_id, GROUP_CONCAT(DISTINCT guest_name) `guest_name`, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, CASE WHEN :propertyManager = 'cloudbeds' THEN num_guests ELSE SUM(num_guests) END `num_guests`, notes, viewed_yn
          FROM ( -- some duplicates may occur; remove them first
                SELECT job_id, room, bed_name, reservation_id, guest_name, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, num_guests, notes, viewed_yn 
                  FROM wp_lh_calendar
                 WHERE job_id = :jobId
                   AND reservation_id > 0 -- ignore room closures
                 GROUP BY job_id, room, bed_name, reservation_id, guest_name, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, num_guests, notes, viewed_yn
                ) t
         WHERE reservation_id > 0 -- ignore room closures
      GROUP BY reservation_id, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, notes, viewed_yn
        HAVING CASE WHEN :propertyManager = 'cloudbeds' THEN num_guests ELSE SUM(num_guests) END >= :groupSize
     UNION
        -- also include bookings for 5 guests into 6 bed dorms
        SELECT job_id, reservation_id, GROUP_CONCAT(DISTINCT guest_name) `guest_name`, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, SUM(num_guests) `num_guests`, notes, viewed_yn
          FROM ( -- some duplicates may occur; remove them first
                SELECT c.job_id, c.room, c.bed_name, c.reservation_id, c.guest_name, c.booking_reference, c.booking_source, c.checkin_date, c.checkout_date, c.booked_date, c.payment_outstanding, c.data_href, c.num_guests, c.notes, c.viewed_yn, c.room_id 
                  FROM wp_lh_calendar c
                  JOIN wp_lh_rooms rm ON c.room_id = rm.id 
                 WHERE c.job_id = :jobId
                   AND c.reservation_id > 0 -- ignore room closures
                   AND rm.capacity = 6
                   AND rm.room_type IN ('MX', 'M', 'F') -- dorms only
                   AND rm.active_yn = 'Y'
                 GROUP BY c.job_id, c.room, c.bed_name, c.reservation_id, c.guest_name, c.booking_reference, c.booking_source, c.checkin_date, c.checkout_date, c.booked_date, c.payment_outstanding, c.data_href, c.num_guests, c.notes, c.viewed_yn, c.room_id
                ) t
         WHERE reservation_id > 0 -- ignore room closures
      GROUP BY reservation_id, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, notes, viewed_yn
      HAVING CASE WHEN :propertyManager = 'cloudbeds' THEN num_guests ELSE SUM(num_guests) END = 5
    </entry>
    <entry key="bedcounts.report.select">
        SELECT room, capacity, room_type,
            -- magnify private rooms based on size of room
            IF(room_type IN ('DBL','TRIPLE','QUAD','TWIN'), num_empty * capacity, num_empty) `num_empty`,
            IF(room_type IN ('DBL','TRIPLE','QUAD','TWIN'), num_staff * capacity, num_staff) `num_staff`,
            IF(room_type IN ('DBL','TRIPLE','QUAD','TWIN'), num_paid * capacity, num_paid) `num_paid`,
            IF(room_type IN ('DBL','TRIPLE','QUAD','TWIN'), num_noshow * capacity, num_noshow) `num_noshow`
        FROM (
            -- room 30/paid beds is split into separate rooms for some reason; collapse them
            SELECT IF(p.room_type = 'PAID BEDS', '30', p.room) `room`, IF(p.room_type = 'PAID BEDS', 8, p.capacity) `capacity`, p.room_type,
                SUM(IF(p.reservation_id IS NULL AND p.room_type != 'PAID BEDS', 1, 0)) `num_empty`,
                SUM(IF(p.reservation_id = 0, 1, 0)) `num_staff`,
                SUM(IF(p.lh_status IN ('checked-in', 'checked-out', 'checked_in', 'checked_out') AND p.reservation_id > 0, 1, 0)) `num_paid`,
                SUM(IF(IFNULL(p.lh_status, '') NOT IN ('checked-in', 'checked-out', 'checked_in', 'checked_out') AND p.reservation_id > 0, 1, 0)) `num_noshow`
            FROM (
                SELECT rm.room, rm.bed_name, rm.capacity, rm.room_type, c.reservation_id, c.payment_outstanding, c.guest_name, c.notes, c.lh_status
                FROM wp_lh_rooms rm
                LEFT OUTER JOIN
                ( SELECT cal.* FROM wp_lh_calendar cal, (select :selectionDate AS selection_date) const
                    WHERE cal.job_id = :jobId -- the job_id to use data for
                    AND cal.checkin_date &lt;= const.selection_date
                    AND cal.checkout_date > const.selection_date
                ) c
                -- if unallocated (room_id = null), then ignore this join field and match on room_type_id
                ON IFNULL(c.room_id, rm.id) = rm.id AND IFNULL(IF(c.room LIKE 'PB(%', 'PB', c.room), 'Unallocated') = rm.room AND c.room_type_id = rm.room_type_id
                WHERE rm.active_yn = 'Y' OR rm.room_type = 'PAID BEDS' OR rm.room = 'Unallocated'
            ) p
            GROUP BY IF(p.room_type = 'PAID BEDS', 'PB', p.room), p.capacity, p.room_type
        ) t
        -- only include Unallocated if we have something to report
        WHERE room != 'Unallocated'
        -- 2018-06-17: don't include unallocated anymore; throws off count in cloudbeds
        --  OR ((room_type = 'PAID BEDS' OR room = 'Unallocated') AND (num_staff > 0 OR num_paid > 0 OR num_noshow > 0))
    </entry>
    <entry key="bedcounts.report.insert">
        INSERT INTO `wp_lh_bedcounts` (report_date, room, capacity, room_type, num_empty, num_staff, num_paid, num_noshow, created_date)
        SELECT :selectionDate, room, capacity, room_type, num_empty, num_staff, num_paid, num_noshow,
               (SELECT MIN(created_date) FROM wp_lh_calendar WHERE job_id = :jobId) AS created_date
        FROM ( __SQL_SELECT__ ) bc
    </entry>
    <entry key="bedcounts.report.insert.hsh">
        INSERT INTO `wp_lh_bedcounts` (report_date, room, capacity, room_type, num_empty, num_staff, num_paid, num_noshow, created_date)
        SELECT :selectionDate, GROUP_CONCAT(room ORDER BY room SEPARATOR ', ') AS room,
            SUM(capacity) AS capacity, hsh_room_type,
            SUM(num_empty) AS num_empty, SUM(num_staff) AS num_staff, SUM(num_paid) AS num_paid, SUM(num_noshow) AS num_noshow,
            (SELECT MIN(created_date) FROM wp_lh_calendar WHERE job_id = :jobId) AS created_date
        FROM (
            SELECT room, capacity, room_type,
                -- these are the room types in the bedcounts for HSH
                CASE WHEN capacity = 2 THEN 'Double/Twin'
                WHEN capacity = 4 THEN 'Quad/4 Bed Dorm'
                WHEN capacity BETWEEN 16 AND 18 THEN '16-18 Bed Dorm'
                WHEN capacity BETWEEN 6 AND 12 THEN '6-12 Bed Dorm'
                ELSE 'Unknown' END AS hsh_room_type,
                num_empty, num_staff, num_paid, num_noshow
            FROM ( __SQL_SELECT__ ) bc
        ) hsh
        GROUP BY CRC32(hsh_room_type) -- some weirdness with MariaDB here
    </entry>
</properties>