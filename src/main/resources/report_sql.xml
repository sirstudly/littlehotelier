<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>Reporting SQL queries</comment>
    <entry key="reservations.split.rooms">
-- Query all unallocated reservations that span more than 1 room for the same room type
INSERT INTO wp_lh_rpt_split_rooms (job_id, reservation_id, guest_name, checkin_date, checkout_date, data_href, 
       notes, lh_status, booking_reference, booking_source, booked_date, eta, viewed_yn, created_date)
SELECT job_id, reservation_id, GROUP_CONCAT(distinct guest_name SEPARATOR ', ' ) guest_name, 
       checkin_date, checkout_date, data_href, notes, lh_status, booking_reference, 
       booking_source, booked_date, eta, viewed_yn, MAX(created_date) `created_date` 
  FROM wp_lh_calendar rep
 WHERE rep.job_id = :jobId -- the job_id of the AllocationScraperJob to use data for
   AND (
       EXISTS (
           -- all reservations where for the same room type, they are split into different rooms
           -- does not take into account group bookings
           SELECT t.job_id, t.reservation_id, t.room_type_id, MAX(t.capacity) AS capacity, SUM(t.num_beds) AS total_beds, COUNT(1) AS num_rooms
             FROM ( -- for each reservation, determine which rooms are they assigned to
                  SELECT c.job_id, c.reservation_id, rm.room, rm.room_type_id, rm.capacity, count(1) AS num_beds
                    FROM (SELECT DISTINCT job_id, reservation_id, room_id FROM wp_lh_calendar WHERE job_id = :jobId) c -- remove duplicates (bug when inserting data?)
                    JOIN wp_lh_rooms rm ON c.room_id = rm.id 
                   WHERE rm.room_type NOT IN ('LT_MALE', 'LT_FEMALE', 'DBL', 'TRIPLE', 'QUAD', 'TWIN')
                     AND c.reservation_id > 0 -- do not include room closures
                   GROUP BY c.job_id, c.reservation_id, rm.room, rm.room_type_id, rm.capacity
              ) t
            WHERE t.reservation_id = rep.reservation_id
            GROUP BY t.reservation_id, t.room_type_id
           HAVING SUM(t.num_beds) &lt;= MAX(t.capacity) -- strip out group bookings (ie. if number of beds exceeds capacity of room)
              AND COUNT(1) > 1 -- assigned to more than one room (for the same room type)
       ) -- end exists
       OR EXISTS (
           -- include all reservations which have unallocated rooms
           SELECT c.job_id, c.reservation_id, c.room_type_id
             FROM wp_lh_calendar c
            WHERE c.room_id IS NULL -- unallocated reservations don't have this set
              AND c.reservation_id = rep.reservation_id
              AND c.job_id = rep.job_id
       ) -- end exists
    )
 GROUP BY job_id, reservation_id, checkin_date, checkout_date, data_href, notes, lh_status, booking_reference, booking_source, booked_date, eta, viewed_yn
    </entry>
    <entry key="unpaid.deposit.report">
		INSERT INTO wp_lh_rpt_unpaid_deposit( job_id, guest_name, checkin_date, checkout_date, payment_total, data_href, booking_reference, booking_source, booked_date, notes, viewed_yn, created_date )
		SELECT job_id, GROUP_CONCAT( DISTINCT guest_name ) `guest_name`, checkin_date, checkout_date, payment_total, data_href, booking_reference, booking_source, booked_date, notes, viewed_yn, MAX(created_date) `created_date`
		  FROM wp_lh_calendar f  
		WHERE job_id = :jobId
		AND payment_total = payment_outstanding
		AND payment_total > 0
		AND booking_source IN ('Booking.com', 'Expedia', 'Agoda')
		GROUP BY reservation_id, checkin_date, checkout_date, payment_total, data_href, booking_reference, booking_source, booked_date, notes, viewed_yn;
    </entry>
    <entry key="group.bookings">
	    INSERT INTO `wp_lh_group_bookings` (job_id, reservation_id, guest_name, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, num_guests, notes, viewed_yn)
        SELECT job_id, reservation_id, GROUP_CONCAT(DISTINCT guest_name) `guest_name`, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, SUM(num_guests) `num_guests`, notes, viewed_yn
          FROM ( -- some duplicates may occur; remove them first
                SELECT job_id, room, bed_name, reservation_id, guest_name, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, num_guests, notes, viewed_yn 
                  FROM wp_lh_calendar
                 WHERE job_id = :jobId
                   AND reservation_id > 0 -- ignore room closures
                 GROUP BY job_id, room, bed_name, reservation_id, guest_name, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, num_guests, notes, viewed_yn
                ) t
         WHERE reservation_id > 0 -- ignore room closures
      GROUP BY reservation_id, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, notes, viewed_yn
        HAVING SUM(num_guests) >= 6
     UNION ALL
        -- also include bookings for 5 guests into 6 bed dorms
        SELECT job_id, reservation_id, GROUP_CONCAT(DISTINCT guest_name) `guest_name`, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, SUM(num_guests) `num_guests`, notes, viewed_yn
          FROM ( -- some duplicates may occur; remove them first
                SELECT c.job_id, c.room, c.bed_name, c.reservation_id, c.guest_name, c.booking_reference, c.booking_source, c.checkin_date, c.checkout_date, c.booked_date, c.payment_outstanding, c.data_href, c.num_guests, c.notes, c.viewed_yn, c.room_id 
                  FROM wp_lh_calendar c
                  JOIN wp_lh_rooms rm ON c.room_id = rm.id 
                 WHERE c.job_id = :jobId
                   AND c.reservation_id > 0 -- ignore room closures
                   AND rm.capacity = 6
                   AND rm.room_type IN ('MX', 'M', 'F') -- dorms only
                   AND rm.active_yn = 'Y'
                 GROUP BY c.job_id, c.room, c.bed_name, c.reservation_id, c.guest_name, c.booking_reference, c.booking_source, c.checkin_date, c.checkout_date, c.booked_date, c.payment_outstanding, c.data_href, c.num_guests, c.notes, c.viewed_yn, c.room_id
                ) t
         WHERE reservation_id > 0 -- ignore room closures
      GROUP BY reservation_id, booking_reference, booking_source, checkin_date, checkout_date, booked_date, payment_outstanding, data_href, notes, viewed_yn
      HAVING SUM(num_guests) = 5
    </entry>
</properties>